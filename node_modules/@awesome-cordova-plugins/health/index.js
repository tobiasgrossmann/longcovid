var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var HealthOriginal = /** @class */ (function (_super) {
    __extends(HealthOriginal, _super);
    function HealthOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HealthOriginal.prototype.isAvailable = function () { return cordova(this, "isAvailable", { "callbackOrder": "reverse" }, arguments); };
    HealthOriginal.prototype.promptInstallFit = function () { return cordova(this, "promptInstallFit", { "callbackOrder": "reverse" }, arguments); };
    HealthOriginal.prototype.requestAuthorization = function (datatypes) { return cordova(this, "requestAuthorization", {}, arguments); };
    HealthOriginal.prototype.isAuthorized = function (datatypes) { return cordova(this, "isAuthorized", {}, arguments); };
    HealthOriginal.prototype.query = function (queryOptions) { return cordova(this, "query", {}, arguments); };
    HealthOriginal.prototype.queryAggregated = function (queryOptionsAggregated) { return cordova(this, "queryAggregated", {}, arguments); };
    HealthOriginal.prototype.store = function (storeOptions) { return cordova(this, "store", {}, arguments); };
    HealthOriginal.pluginName = "Health";
    HealthOriginal.plugin = "cordova-plugin-health";
    HealthOriginal.pluginRef = "navigator.health";
    HealthOriginal.repo = "https://github.com/dariosalvi78/cordova-plugin-health";
    HealthOriginal.platforms = ["Android", "iOS"];
    return HealthOriginal;
}(AwesomeCordovaNativePlugin));
var Health = new HealthOriginal();
export { Health };
//# sourceMappingURL=data:application/json;base64,