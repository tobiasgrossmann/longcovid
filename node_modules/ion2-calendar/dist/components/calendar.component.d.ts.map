{"version":3,"file":"calendar.component.d.ts","sources":["calendar.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { OnInit, EventEmitter, Provider } from '@angular/core';\nimport { CalendarMonth, CalendarModalOptions, CalendarComponentOptions, CalendarDay, CalendarComponentPayloadTypes, CalendarComponentMonthChange, CalendarComponentTypeProperty } from '../calendar.model';\nimport { CalendarService } from '../services/calendar.service';\nimport { ControlValueAccessor } from '@angular/forms';\nexport declare const ION_CAL_VALUE_ACCESSOR: Provider;\ninterface CompatibleIcons {\n    caretDown: string;\n    caretUp: string;\n    chevronBack: string;\n    chevronForward: string;\n}\nexport declare class CalendarComponent implements ControlValueAccessor, OnInit {\n    calSvc: CalendarService;\n    _d: CalendarModalOptions;\n    _options: CalendarComponentOptions;\n    _view: 'month' | 'days';\n    _calendarMonthValue: CalendarDay[];\n    _showToggleButtons: boolean;\n    _compatibleIcons: CompatibleIcons;\n    showToggleButtons: boolean;\n    _showMonthPicker: boolean;\n    showMonthPicker: boolean;\n    monthOpt: CalendarMonth;\n    format: string;\n    type: CalendarComponentTypeProperty;\n    readonly: boolean;\n    change: EventEmitter<CalendarComponentPayloadTypes>;\n    monthChange: EventEmitter<CalendarComponentMonthChange>;\n    select: EventEmitter<CalendarDay>;\n    selectStart: EventEmitter<CalendarDay>;\n    selectEnd: EventEmitter<CalendarDay>;\n    options: CalendarComponentOptions;\n    readonly MONTH_DATE_FORMAT = \"MMMM yyyy\";\n    constructor(calSvc: CalendarService);\n    ngOnInit(): void;\n    getViewDate(): CalendarComponentPayloadTypes;\n    getDate(date: number): Date;\n    setViewDate(value: CalendarComponentPayloadTypes): void;\n    switchView(): void;\n    prev(): void;\n    next(): void;\n    prevYear(): void;\n    nextYear(): void;\n    nextMonth(): void;\n    canNext(): boolean;\n    backMonth(): void;\n    canBack(): boolean;\n    monthOnSelect(month: number): void;\n    onChanged($event: CalendarDay[]): void;\n    swipeEvent($event: any): void;\n    _onChanged: Function;\n    _onTouched: Function;\n    _payloadToTimeNumber(value: CalendarComponentPayloadTypes): number;\n    _monthFormat(date: number): string;\n    private initOpt;\n    createMonth(date: number): CalendarMonth;\n    _createCalendarDay(value: CalendarComponentPayloadTypes): CalendarDay;\n    _handleType(value: number): CalendarComponentPayloadTypes;\n    writeValue(obj: any): void;\n    registerOnChange(fn: () => {}): void;\n    registerOnTouched(fn: () => {}): void;\n    _writeValue(value: any): void;\n}\nexport {};\n"]}