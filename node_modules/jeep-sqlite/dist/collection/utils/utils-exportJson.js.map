{"version":3,"file":"utils-exportJson.js","sourceRoot":"","sources":["../../src/utils/utils-exportJson.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from '@stencil/core';\n\nimport { JsonSQLite, JsonTable, JsonColumn, JsonIndex, JsonTrigger, JsonView, JsonProgressListener } from '../interfaces/interfaces';\nimport { execute, queryAll, run, isTableExists, getTableList } from './utils-sqlite';\nimport { checkSchemaValidity, checkIndexesValidity, checkTriggersValidity, getValues } from './utils-json';\n\nexport const createExportObject = async (db: any, sqlObj: JsonSQLite,\n  exportProgress: EventEmitter<JsonProgressListener>): Promise<JsonSQLite> => {\n  const retObj: JsonSQLite = {} as JsonSQLite;\n  let tables: JsonTable[] = [];\n  let views: JsonView[] = [];\n  let errmsg = '';\n  try {\n    // get View's name\n    views = await getViewsName(db);\n\n    // get Table's name\n    const resTables: any[] = await getTablesNameSQL(db);\n    if (resTables.length === 0) {\n      return Promise.reject(\n        new Error(\"createExportObject: table's names failed\"));\n    } else {\n      const isTable = await isTableExists(db, 'sync_table');\n      if(!isTable && sqlObj.mode === 'partial') {\n        return Promise.reject(new Error('No sync_table available'));\n      }\n\n      switch (sqlObj.mode) {\n        case 'partial': {\n          tables = await getTablesPartial(db, resTables, exportProgress);\n          break;\n        }\n        case 'full': {\n          tables = await getTablesFull(db, resTables, exportProgress);\n          break;\n        }\n        default: {\n          errmsg =\n            'createExportObject: expMode ' + sqlObj.mode + ' not defined';\n          break;\n        }\n      }\n      if (errmsg.length > 0) {\n        return Promise.reject(new Error(errmsg));\n      }\n      if (tables.length > 0) {\n        retObj.database = sqlObj.database;\n        retObj.version = sqlObj.version;\n        retObj.encrypted = sqlObj.encrypted;\n        retObj.mode = sqlObj.mode;\n        retObj.tables = tables;\n        if (views.length > 0) {\n          retObj.views = views;\n        }\n\n      }\n      return Promise.resolve(retObj);\n    }\n  } catch (err) {\n    return Promise.reject(new Error('createExportObject: ' + err.message));\n  }\n}\n\nexport const getViewsName = async (mDb: any): Promise<JsonView[]> => {\n  const views: JsonView[] = [];\n  let sql = 'SELECT name,sql FROM sqlite_master WHERE ';\n  sql += \"type='view' AND name NOT LIKE 'sqlite_%';\";\n  let retQuery: any[] = [];\n  try {\n    retQuery = await queryAll(mDb, sql, []);\n    for (const query of retQuery) {\n      const view: JsonView = {} as JsonView;\n      view.name = query.name;\n      view.value = query.sql.substring(query.sql.indexOf('AS ') + 3);\n      views.push(view);\n    }\n    return Promise.resolve(views);\n  } catch (err) {\n    return Promise.reject(new Error(`getViewsName: ${err.message}`));\n  }\n}\n\nexport const getTablesFull = async (db: any, resTables: any[],\n  exportProgress: EventEmitter<JsonProgressListener>): Promise<JsonTable[]> => {\n  const tables: JsonTable[] = [];\n  let errmsg = '';\n  try {\n    // Loop through the tables\n    for (const rTable of resTables) {\n      let tableName: string;\n      let sqlStmt: string;\n\n      if (rTable.name) {\n        tableName = rTable.name;\n      } else {\n        errmsg = 'GetTablesFull: no name';\n        break;\n      }\n      if (rTable.sql) {\n        sqlStmt = rTable.sql;\n      } else {\n        errmsg = 'GetTablesFull: no sql';\n        break;\n      }\n      const table: JsonTable = {} as JsonTable;\n      // create Table's Schema\n      const schema: JsonColumn[] = await getSchema(sqlStmt/*, tableName*/);\n      if (schema.length === 0) {\n        errmsg = 'GetTablesFull: no Schema returned';\n        break;\n      }\n      // check schema validity\n      await checkSchemaValidity(schema);\n      // create Table's indexes if any\n      const indexes: JsonIndex[] = await getIndexes(db, tableName);\n      if (indexes.length > 0) {\n        // check indexes validity\n        await checkIndexesValidity(indexes);\n      }\n      // create Table's triggers if any\n      const triggers: JsonTrigger[] = await getTriggers(db, tableName);\n      if (triggers.length > 0) {\n        // check triggers validity\n        await checkTriggersValidity(triggers);\n      }\n      let msg: string = `Full: Table ${tableName} schema export completed ...`\n      exportProgress.emit({progress: msg});\n      // create Table's Data\n      const query = `SELECT * FROM ${tableName};`;\n      const values: any[] = await getValues(db, query, tableName);\n      table.name = tableName;\n      if (schema.length > 0) {\n        table.schema = schema;\n      } else {\n        errmsg = `GetTablesFull: must contain schema`;\n        break;\n      }\n      if (indexes.length > 0) {\n        table.indexes = indexes;\n      }\n      if (triggers.length > 0) {\n        table.triggers = triggers;\n      }\n      if (values.length > 0) {\n        table.values = values;\n      }\n      if (Object.keys(table).length <= 1) {\n        errmsg = `GetTablesFull: table ${tableName} is not a jsonTable`;\n        break;\n      }\n      msg = `Full: Table ${tableName} table data export completed ...`\n      exportProgress.emit({progress: msg});\n\n      tables.push(table);\n    }\n    if (errmsg.length > 0) {\n      return Promise.reject(new Error(errmsg));\n    }\n    return Promise.resolve(tables);\n  } catch (err) {\n    return Promise.reject(new Error(`GetTablesFull: ${err.message}`));\n  }\n}\nexport const getSchema = async (sqlStmt: string/*, tableName: string*/): Promise<JsonColumn[]> => {\n  const schema: JsonColumn[] = [];\n  // take the substring between parenthesis\n  const openPar: number = sqlStmt.indexOf('(');\n  const closePar: number = sqlStmt.lastIndexOf(')');\n  let sstr: string = sqlStmt.substring(openPar + 1, closePar);\n  // check if there is other parenthesis and replace the ',' by '§'\n  try {\n    sstr = await modEmbeddedParentheses(sstr);\n    const sch: string[]  = sstr.split(\",\");\n    // for each element of the array split the\n    // first word as key\n    for (let j: number = 0; j < sch.length; j++) {\n      let row: string[] = [];\n      const scht: string = sch[j].replace(/\\n/g,\"\").trim();\n      row[0] = scht.substring(0, scht.indexOf(\" \"));\n      row[1] = scht.substring(scht.indexOf(\" \") + 1);\n\n      const jsonRow: JsonColumn = {} as JsonColumn;\n      if (row[0].toUpperCase() === \"FOREIGN\") {\n        const oPar: number = scht.indexOf(\"(\");\n        const cPar: number = scht.indexOf(\")\");\n        const fk = scht.substring(oPar + 1, cPar);\n        const fknames: string[] = fk.split('§');\n        row[0] = fknames.join(',');\n        row[0] = row[0].replace(/, /g,\",\")\n        row[1] = scht.substring(cPar + 2);\n        jsonRow['foreignkey'] = row[0];\n      } else if (row[0].toUpperCase() === \"PRIMARY\") {\n        const oPar: number = scht.indexOf(\"(\");\n        const cPar: number = scht.indexOf(\")\");\n        const pk: string = scht.substring(oPar + 1, cPar);\n        const pknames: string[] = pk.split('§');\n        row[0] = \"CPK_\" + pknames.join('_');\n        row[0] = row[0].replace(/_ /g,\"_\")\n        row[1] = scht;\n        jsonRow['constraint'] = row[0];\n      } else if (row[0].toUpperCase() === \"CONSTRAINT\") {\n        let tRow: string[] = [];\n        const row1t: string = row[1].trim();\n        tRow[0] = row1t.substring(0, row1t.indexOf(\" \"));\n        tRow[1] = row1t.substring(row1t.indexOf(\" \") + 1);\n        row[0] = tRow[0];\n        jsonRow['constraint'] = row[0];\n        row[1] = tRow[1];\n      } else {\n        jsonRow['column'] =row[0];\n      }\n      jsonRow['value'] = row[1].replace(/§/g, \",\");\n      schema.push(jsonRow);\n    }\n    return Promise.resolve(schema);\n  } catch (err) {\n    return Promise.reject(new Error(err.message));\n  }\n}\nexport const getIndexes = async (db: any, tableName: string): Promise<JsonIndex[]> => {\n  const indexes: JsonIndex[] = [];\n  let errmsg = '';\n  try {\n    let stmt = 'SELECT name,tbl_name,sql FROM sqlite_master WHERE ';\n    stmt += `type = 'index' AND tbl_name = '${tableName}' `;\n    stmt += `AND sql NOTNULL;`;\n    const retIndexes = await queryAll(db, stmt, []);\n    if (retIndexes.length > 0) {\n      for (const rIndex of retIndexes) {\n        const keys: string[] = Object.keys(rIndex);\n        if (keys.length === 3) {\n          if (rIndex['tbl_name'] === tableName) {\n            const sql: string = rIndex['sql'];\n            const mode: string = sql.includes('UNIQUE') ? 'UNIQUE' : '';\n            const oPar: number = sql.lastIndexOf('(');\n            const cPar: number = sql.lastIndexOf(')');\n            const index: JsonIndex = {} as JsonIndex;\n            index.name = rIndex['name'];\n            index.value = sql.slice(oPar + 1, cPar);\n            if (mode.length > 0) index.mode = mode;\n            indexes.push(index);\n          } else {\n            errmsg = `GetIndexes: Table ${tableName} doesn't match`;\n            break;\n          }\n        } else {\n          errmsg = `GetIndexes: Table ${tableName} creating indexes`;\n          break;\n        }\n      }\n      if (errmsg.length > 0) {\n        return Promise.reject(new Error(errmsg));\n      }\n    }\n    return Promise.resolve(indexes);\n  } catch (err) {\n    return Promise.reject(new Error(`GetIndexes: ${err.message}`));\n  }\n}\nexport const getTriggers = async (db: any, tableName: string): Promise<JsonTrigger[]> => {\n  const triggers: JsonTrigger[] = [];\n  try {\n    let stmt = 'SELECT name,tbl_name,sql FROM sqlite_master WHERE ';\n    stmt += `type = 'trigger' AND tbl_name = '${tableName}' `;\n    stmt += `AND sql NOT NULL;`;\n    const retTriggers = await queryAll(db, stmt, []);\n    if (retTriggers.length > 0) {\n      for (const rTrg of retTriggers) {\n        const keys: string[] = Object.keys(rTrg);\n        if (keys.length === 3) {\n          if (rTrg['tbl_name'] === tableName) {\n            const sql: string = rTrg['sql'];\n\n            const name: string = rTrg['name'];\n            let sqlArr: string[] = sql.split(name);\n            if (sqlArr.length != 2) {\n              return Promise.reject(\n                new Error(\n                  `GetTriggers: sql split name does not return 2 values`,\n                ),\n              );\n            }\n            if (!sqlArr[1].includes(tableName)) {\n              return Promise.reject(\n                new Error(\n                  `GetTriggers: sql split does not contains ${tableName}`,\n                ),\n              );\n            }\n            const timeEvent = sqlArr[1].split(tableName, 1)[0].trim();\n            sqlArr = sqlArr[1].split(timeEvent + ' ' + tableName);\n            if (sqlArr.length != 2) {\n              return Promise.reject(\n                new Error(\n                  `GetTriggers: sql split tableName does not return 2 values`,\n                ),\n              );\n            }\n            let condition = '';\n            let logic = '';\n            if (sqlArr[1].trim().substring(0, 5).toUpperCase() !== 'BEGIN') {\n              sqlArr = sqlArr[1].trim().split('BEGIN');\n              if (sqlArr.length != 2) {\n                return Promise.reject(\n                  new Error(\n                    `GetTriggers: sql split BEGIN does not return 2 values`,\n                  ),\n                );\n              }\n              condition = sqlArr[0].trim();\n              logic = 'BEGIN' + sqlArr[1];\n            } else {\n              logic = sqlArr[1].trim();\n            }\n\n            const trigger: JsonTrigger = {} as JsonTrigger;\n            trigger.name = name;\n            trigger.logic = logic;\n            if (condition.length > 0) trigger.condition = condition;\n            trigger.timeevent = timeEvent;\n            triggers.push(trigger);\n          } else {\n            return Promise.reject(\n              new Error(`GetTriggers: Table ${tableName} doesn't match`),\n            );\n          }\n        } else {\n          return Promise.reject(\n            new Error(`GetTriggers: Table ${tableName} creating indexes`),\n          );\n        }\n      }\n    }\n    return Promise.resolve(triggers);\n  } catch (err) {\n    return Promise.reject(new Error(`GetTriggers: ${err.message}`));\n  }\n}\nexport const getTablesPartial = async (db: any, resTables: any[],\n  exportProgress: EventEmitter<JsonProgressListener>): Promise<JsonTable[]> => {\n  const tables: JsonTable[] = [];\n  let modTables: any = {};\n  let syncDate = 0;\n  let modTablesKeys: string[] = [];\n  let errmsg = '';\n  try {\n    // Get the syncDate and the Modified Tables\n    const partialModeData: any = await getPartialModeData(db, resTables);\n    if (Object.keys(partialModeData).includes('syncDate')) {\n      syncDate = partialModeData.syncDate;\n    }\n    if (Object.keys(partialModeData).includes('modTables')) {\n      modTables = partialModeData.modTables;\n      modTablesKeys = Object.keys(modTables);\n    }\n    // Loop trough tables\n    for (const rTable of resTables) {\n      let tableName = '';\n      let sqlStmt = '';\n      if (rTable.name) {\n        tableName = rTable.name;\n      } else {\n        errmsg = 'GetTablesFull: no name';\n        break;\n      }\n      if (rTable.sql) {\n        sqlStmt = rTable.sql;\n      } else {\n        errmsg = 'GetTablesFull: no sql';\n        break;\n      }\n      if (\n        modTablesKeys.length == 0 ||\n        modTablesKeys.indexOf(tableName) === -1 ||\n        modTables[tableName] == 'No'\n      ) {\n        continue;\n      }\n      const table: JsonTable = {} as JsonTable;\n      let schema: JsonColumn[] = [];\n      let indexes: JsonIndex[] = [];\n      let triggers: JsonTrigger[] = [];\n      table.name = rTable;\n      if (modTables[table.name] === 'Create') {\n        // create Table's Schema\n        schema = await getSchema(sqlStmt/*, tableName*/);\n        if (schema.length > 0) {\n          // check schema validity\n          await checkSchemaValidity(schema);\n        }\n        // create Table's indexes if any\n        indexes = await getIndexes(db, tableName);\n        if (indexes.length > 0) {\n          // check indexes validity\n          await checkIndexesValidity(indexes);\n        }\n        // create Table's triggers if any\n        triggers = await getTriggers(db, tableName);\n        if (triggers.length > 0) {\n          // check triggers validity\n          await checkTriggersValidity(triggers);\n        }\n      }\n      let msg: string = `Partial: Table ${tableName} schema export completed ...`\n      exportProgress.emit({progress: msg});\n      // create Table's Data\n      let query = '';\n      if (modTables[tableName] === 'Create') {\n        query = `SELECT * FROM ${tableName};`;\n      } else {\n        query =\n          `SELECT * FROM ${tableName} ` +\n          `WHERE last_modified > ${syncDate};`;\n      }\n      const values: any[] = await getValues(db, query, tableName);\n\n      // check the table object validity\n      table.name = tableName;\n      if (schema.length > 0) {\n        table.schema = schema;\n      }\n      if (indexes.length > 0) {\n        table.indexes = indexes;\n      }\n      if (triggers.length > 0) {\n        table.triggers = triggers;\n      }\n      if (values.length > 0) {\n        table.values = values;\n      }\n      if (Object.keys(table).length <= 1) {\n        errmsg = `GetTablesPartial: table ${tableName} is not a jsonTable`;\n        break;\n      }\n      msg = `Partial: Table ${tableName} table data export completed ...`\n      exportProgress.emit({progress: msg});\n      tables.push(table);\n    }\n    if (errmsg.length > 0) {\n      return Promise.reject(new Error(errmsg));\n    }\n    return Promise.resolve(tables);\n  } catch (err) {\n    return Promise.reject(new Error(`GetTablesPartial: ${err.message}`));\n  }\n}\nexport const getPartialModeData = async (db: any, resTables: any[]): Promise<any> => {\n  const retData: any = {};\n  try {\n    // get the synchronization date\n    const syncDate: number = await getSynchroDate(db);\n    if (syncDate <= 0) {\n      return Promise.reject(new Error(`GetPartialModeData: no syncDate`));\n    }\n    // get the tables which have been updated\n    // since last synchronization\n    const modTables: any = await getTablesModified(db, resTables, syncDate );\n    if (modTables.length <= 0) {\n      return Promise.reject(new Error(`GetPartialModeData: no modTables`));\n    }\n    retData.syncDate = syncDate;\n    retData.modTables = modTables;\n    return Promise.resolve(retData);\n  } catch (err) {\n    return Promise.reject(new Error(`GetPartialModeData: ${err.message}`));\n  }\n}\nexport const getTablesNameSQL = async (db: any): Promise<any[]> => {\n  let sql = 'SELECT name,sql FROM sqlite_master WHERE ';\n  sql += \"type='table' AND name NOT LIKE 'sync_table' \";\n  sql += \"AND name NOT LIKE '_temp_%' \";\n  sql += \"AND name NOT LIKE 'sqlite_%';\";\n  try {\n    const retQuery: any[] = await queryAll(db, sql, []);\n    return Promise.resolve(retQuery);\n  } catch (err) {\n    return Promise.reject(new Error(`getTablesNamesSQL: ${err.message}`));\n  }\n}\nexport const getTablesModified = async (db: any, tables: any[], syncDate: number): Promise<any> => {\n  let errmsg = '';\n  try {\n    const retModified: any = {};\n    for (const rTable of tables) {\n      let mode: string;\n      // get total count of the table\n      let stmt = 'SELECT count(*) AS tcount  ';\n      stmt += `FROM ${rTable.name};`;\n      let retQuery: any[] = await queryAll(db, stmt, []);\n      if (retQuery.length != 1) {\n        errmsg = 'GetTableModified: total ' + 'count not returned';\n        break;\n      }\n      const totalCount: number = retQuery[0]['tcount'];\n      // get total count of modified since last sync\n      stmt = 'SELECT count(*) AS mcount FROM ';\n      stmt += `${rTable.name} WHERE last_modified > `;\n      stmt += `${syncDate};`;\n      retQuery = await queryAll(db, stmt, []);\n      if (retQuery.length != 1) break;\n      const totalModifiedCount: number = retQuery[0]['mcount'];\n\n      if (totalModifiedCount === 0) {\n        mode = 'No';\n      } else if (totalCount === totalModifiedCount) {\n        mode = 'Create';\n      } else {\n        mode = 'Modified';\n      }\n      const key: string = rTable.name;\n      retModified[key] = mode;\n    }\n    if (errmsg.length > 0) {\n      return Promise.reject(new Error(errmsg));\n    }\n    return Promise.resolve(retModified);\n  } catch (err) {\n    return Promise.reject(new Error(`GetTableModified: ${err.message}`));\n  }\n}\nexport const getSynchroDate = async (db: any): Promise<number> => {\n  try {\n    const stmt = `SELECT sync_date FROM sync_table WHERE id = 1;`;\n    const res = await queryAll(db,stmt,[]);\n    return Promise.resolve(res[0][\"sync_date\"]);\n  } catch (err) {\n    const msg = `GetSynchroDate: ${err.message}`;\n    return Promise.reject(new Error(msg));\n  }\n}\nexport const getLastExportDate = async (db: any): Promise<number> => {\n  try {\n    const stmt = `SELECT sync_date FROM sync_table WHERE id = 2;`;\n    const res = await queryAll(db,stmt,[]);\n    if (res.length === 0) {\n      return Promise.resolve(-1);\n    } else {\n      return Promise.resolve(res[0][\"sync_date\"]);\n    }\n  } catch (err) {\n    const msg = `getLastExport: ${err.message}`;\n    return Promise.reject(new Error(msg));\n  }\n}\nexport const setLastExportDate = async (db: any, lastExportedDate: string): Promise<any> => {\n  try {\n    const isTable = await isTableExists(db, 'sync_table');\n    if(!isTable) {\n      return Promise.reject(new Error('setLastExportDate: No sync_table available'));\n    }\n    const sDate: number = Math.round(new Date(lastExportedDate).getTime() / 1000);\n    let stmt = \"\";\n    if( await getLastExportDate(db) > 0) {\n      stmt = `UPDATE sync_table SET sync_date = ${sDate} WHERE id = 2;`;\n    } else {\n      stmt =  `INSERT INTO sync_table (sync_date) VALUES (${sDate});`\n    }\n    const changes: number = await execute(db, stmt, false);\n    if (changes < 0) {\n      return { result: false, message: 'setLastExportDate failed' };\n    } else {\n      return { result: true };\n    }\n  } catch (err) {\n    return { result: false, message: `setLastExportDate failed: ${err.message}` };\n  }\n}\nexport const delExportedRows = async (db:any): Promise<void> => {\n  let lastExportDate: number;\n  try {\n    // check if synchronization table exists\n    const isTable = await isTableExists(db, 'sync_table');\n    if(!isTable) {\n      return Promise.reject(new Error('DelExportedRows: No sync_table available'));\n    }\n    // get the last export date\n    lastExportDate = await getLastExportDate(db);\n    if( lastExportDate < 0) {\n      return Promise.reject(\n        new Error(\"DelExportedRows: no last exported date available\"));\n    }\n    // get the table' name list\n    const resTables: any[] = await getTableList(db);\n    if (resTables.length === 0) {\n      return Promise.reject(\n        new Error(\"DelExportedRows: No table's names returned\"));\n    }\n    // Loop through the tables\n    for (const table of resTables) {\n      let lastId: number = -1\n      // define the delete statement\n      const delStmt = `DELETE FROM ${table}\n            WHERE sql_deleted = 1 AND last_modified < ${lastExportDate};`\n      lastId = await run(db, delStmt, [], true);\n      if (lastId < 0) {\n        return Promise.reject(new Error('DelExportedRows: lastId < 0'));\n      }\n    }\n  } catch (err) {\n    return Promise.reject(new Error(`DelExportedRows failed: ${err.message}`));\n  }\n\n}\nconst modEmbeddedParentheses = async (sstr: string): Promise<string> => {\n  const oParArray: number[] = indexOfChar(sstr, '(');\n  const cParArray: number[] = indexOfChar(sstr, ')');\n  if (oParArray.length != cParArray.length) {\n    return Promise.reject(\"ModEmbeddedParentheses: Not same number of '(' & ')'\");\n  }\n  if (oParArray.length === 0) {\n    return Promise.resolve(sstr);\n  }\n  let resStmt = sstr.substring(0, oParArray[0] - 1);\n  for (let i: number = 0; i < oParArray.length; i++) {\n    let str: string;\n    if (i < oParArray.length - 1) {\n        if (oParArray[i + 1] < cParArray[i]) {\n            str = sstr.substring(oParArray[i] - 1, cParArray[i + 1]);\n            i++;\n        } else {\n            str = sstr.substring(oParArray[i] - 1, cParArray[i]);\n        }\n    } else {\n        str = sstr.substring(oParArray[i] - 1, cParArray[i]);\n    }\n    const newS = str.replace(/,/g, \"§\");\n    resStmt += newS;\n    if (i < oParArray.length - 1) {\n        resStmt += sstr.substring(cParArray[i], oParArray[i + 1] - 1);\n    }\n  }\n  resStmt += sstr.substring(cParArray[cParArray.length - 1], sstr.length);\n  return Promise.resolve(resStmt);\n}\nconst indexOfChar = (str: string, char: string): number[] => {\n  let tmpArr: string[] = [...str];\n  char = char.toLowerCase();\n  return tmpArr.reduce((results: number[], elem: string, idx: number) =>\n    elem.toLowerCase() === char ? [...results, idx] : results, []);\n}\n"]}