{"version":3,"file":"utils-store.js","sourceRoot":"","sources":["../../src/utils/utils-store.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,MAAM,cAAc,GAAG,KAAK,EAAE,MAAc,EAAE,KAAkB,EAAuB,EAAE;EAC9F,IAAI;IACF,MAAM,KAAK,GAAe,MAAM,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACtD,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;GAC/B;EAAC,OAAO,GAAG,EAAE;IACZ,OAAO,OAAO,CAAC,MAAM,CAAC,mBAAmB,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;GACzD;AACH,CAAC,CAAA;AACD,MAAM,CAAC,MAAM,mBAAmB,GAAG,KAAK,EAAE,MAAc,EAAE,KAAkB,EAAiB,EAAE;EAC7F,IAAI;IACF,sBAAsB;IACtB,MAAM,IAAI,GAAG,IAAI,CAAC;IAClB,qBAAqB;IACrB,MAAM,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAClC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;GAC1B;EAAC,OAAO,GAAG,EAAE;IACZ,OAAO,OAAO,CAAC,MAAM,CAAC,wBAAwB,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;GAC9D;AACH,CAAC,CAAA;AACD,MAAM,CAAC,MAAM,YAAY,GAAG,KAAK,EAAE,GAAQ,EAAE,MAAc,EAAE,KAAkB,EAAiB,EAAE;EAChG,IAAI;IACF,sBAAsB;IACtB,MAAM,IAAI,GAAe,GAAG,CAAC,MAAM,EAAE,CAAC;IACtC,qBAAqB;IACrB,MAAM,aAAa,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IAEzC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;GAC1B;EAAC,OAAO,GAAG,EAAE;IACZ,OAAO,OAAO,CAAC,MAAM,CAAC,iBAAiB,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;GACvD;AACH,CAAC,CAAA;AACD,MAAM,CAAC,MAAM,aAAa,GAAG,KAAK,EAAE,MAAc,EAAE,IAAgB,EAAE,KAAkB,EAAiB,EAAE;EACzG,IAAI;IACF,qBAAqB;IACrB,MAAM,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAClC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;GAC1B;EAAC,OAAO,GAAG,EAAE;IACZ,OAAO,OAAO,CAAC,MAAM,CAAC,kBAAkB,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;GACxD;AACH,CAAC,CAAA;AACD,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,EAAE,MAAc,EAAE,KAAkB,EAAiB,EAAE;EAC3F,IAAI;IACF,MAAM,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IAC/B,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;GAC1B;EAAC,OAAO,GAAG,EAAE;IACZ,OAAO,OAAO,CAAC,MAAM,CAAC,sBAAsB,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;GAC5D;AACH,CAAC,CAAA;AACD,MAAM,CAAC,MAAM,WAAW,GAAG,KAAK,EAAE,MAAc,EAAE,KAAkB,EAAoB,EAAE;EACxF,IAAI;IACF,MAAM,KAAK,GAAe,MAAM,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACtD,IAAG,KAAK,IAAI,IAAI,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;MACpC,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;KAC9B;SAAM;MACL,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;KAC/B;GACJ;EAAC,OAAO,GAAG,EAAE;IACV,OAAO,OAAO,CAAC,MAAM,CAAC,gBAAgB,GAAG,EAAE,CAAC,CAAC;GAC9C;AACH,CAAC,CAAA;AACD,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,EAAE,MAAc,EAAE,MAAc,EAAE,KAAkB,EAAiB,EAAE;EAC5G,MAAM,SAAS,GAAG,GAAG,MAAM,IAAI,MAAM,EAAE,CAAC;EACxC,IAAI;IACF,uBAAuB;IACvB,MAAM,SAAS,GAAY,MAAM,WAAW,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IAC/D,IAAI,SAAS,EAAE;MACb,MAAM,MAAM,GAAY,MAAM,WAAW,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;MACzD,IAAI,MAAM,EAAE;QACV,MAAM,KAAK,GAAG,MAAM,cAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QACrD,MAAM,aAAa,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAC1C,MAAM,iBAAiB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC1C,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;OAC1B;WAAM;QACL,OAAO,OAAO,CAAC,MAAM,CACnB,IAAI,KAAK,CAAC,uBAAuB,MAAM,iBAAiB,CAAC,CAAC,CAAC;OAC9D;KACF;SAAM;MACL,OAAO,OAAO,CAAC,MAAM,CACnB,IAAI,KAAK,CAAC,uBAAuB,SAAS,iBAAiB,CAAC,CAAC,CAAC;KACjE;GACF;EAAC,OAAO,GAAG,EAAE;IACZ,OAAO,OAAO,CAAC,MAAM,CAAC,uBAAuB,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;GAC7D;AACH,CAAC,CAAA;AACD,MAAM,CAAC,MAAM,aAAa,GAAG,KAAK,EAAE,MAAc,EAAE,IAAY,EAAE,KAAkB,EAAiB,EAAE;EACrG,IAAI;IACF,uBAAuB;IACvB,MAAM,MAAM,GAAY,MAAM,WAAW,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IACzD,IAAI,MAAM,EAAE;MACV,MAAM,KAAK,GAAG,MAAM,cAAc,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;MAClD,MAAM,aAAa,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;MACxC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;KAC1B;SAAM;MACL,OAAO,OAAO,CAAC,MAAM,CACnB,IAAI,KAAK,CAAC,kBAAkB,MAAM,iBAAiB,CAAC,CAAC,CAAC;KACzD;GACF;EAAC,OAAO,GAAG,EAAE;IACZ,OAAO,OAAO,CAAC,MAAM,CAAC,kBAAkB,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;GACxD;AACH,CAAC,CAAA;AACD,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,EAAE,KAAkB,EAAqB,EAAE;EAChF,IAAI;IACF,MAAM,SAAS,GAAa,MAAM,KAAK,CAAC,IAAI,EAAE,CAAC;IAC/C,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;GACnC;EAAC,OAAO,GAAG,EAAE;IACZ,OAAO,OAAO,CAAC,MAAM,CAAC,uBAAuB,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;GAC7D;AACH,CAAC,CAAA","sourcesContent":["export const getDBFromStore = async (dbName: string, store: LocalForage): Promise<Uint8Array> => {\n  try {\n    const retDb: Uint8Array = await store.getItem(dbName);\n    return Promise.resolve(retDb);\n  } catch (err) {\n    return Promise.reject(`GetDBFromStore: ${err.message}`);\n  }\n}\nexport const setInitialDBToStore = async (dbName: string, store: LocalForage): Promise<void> => {\n  try {\n    // export the database\n    const data = null;\n    // store the database\n    await store.setItem(dbName, data);\n    return Promise.resolve();\n  } catch (err) {\n    return Promise.reject(`SetInitialDBToStore: ${err.message}`);\n  }\n}\nexport const setDBToStore = async (mDb: any, dbName: string, store: LocalForage): Promise<void> => {\n  try {\n    // export the database\n    const data: Uint8Array = mDb.export();\n    // store the database\n    await saveDBToStore(dbName, data, store);\n\n    return Promise.resolve();\n  } catch (err) {\n    return Promise.reject(`SetDBToStore: ${err.message}`);\n  }\n}\nexport const saveDBToStore = async (dbName: string, data: Uint8Array, store: LocalForage): Promise<void> => {\n  try {\n    // store the database\n    await store.setItem(dbName, data);\n    return Promise.resolve();\n  } catch (err) {\n    return Promise.reject(`SaveDBToStore: ${err.message}`);\n  }\n}\nexport const removeDBFromStore = async (dbName: string, store: LocalForage): Promise<void> => {\n  try {\n    await store.removeItem(dbName);\n    return Promise.resolve();\n  } catch (err) {\n    return Promise.reject(`RemoveDBFromStore: ${err.message}`);\n  }\n}\nexport const isDBInStore = async (dbName: string, store: LocalForage): Promise<boolean> => {\n  try {\n    const retDb: Uint8Array = await store.getItem(dbName);\n    if(retDb != null && retDb.length > 0) {\n      return Promise.resolve(true);\n    } else {\n      return Promise.resolve(false);\n    }\n} catch (err) {\n    return Promise.reject(`IsDBInStore: ${err}`);\n  }\n}\nexport const restoreDBFromStore = async (dbName: string, prefix: string, store: LocalForage): Promise<void> => {\n  const mFileName = `${prefix}-${dbName}`;\n  try {\n    // check if file exists\n    const isFilePre: boolean = await isDBInStore(mFileName, store);\n    if (isFilePre) {\n      const isFile: boolean = await isDBInStore(dbName, store);\n      if (isFile) {\n        const retDb = await getDBFromStore(mFileName, store);\n        await saveDBToStore(dbName, retDb, store);\n        await removeDBFromStore(mFileName, store);\n        return Promise.resolve();\n      } else {\n        return Promise.reject(\n          new Error(`RestoreDBFromStore: ${dbName} does not exist`));\n      }\n    } else {\n      return Promise.reject(\n        new Error(`RestoreDBFromStore: ${mFileName} does not exist`));\n    }\n  } catch (err) {\n    return Promise.reject(`RestoreDBFromStore: ${err.message}`);\n  }\n}\nexport const copyDBToStore = async (dbName: string, toDb: string, store: LocalForage): Promise<void> => {\n  try {\n    // check if file exists\n    const isFile: boolean = await isDBInStore(dbName, store);\n    if (isFile) {\n      const retDb = await getDBFromStore(dbName, store);\n      await saveDBToStore(toDb, retDb, store);\n      return Promise.resolve();\n    } else {\n      return Promise.reject(\n        new Error(`CopyDBToStore: ${dbName} does not exist`));\n    }\n  } catch (err) {\n    return Promise.reject(`CopyDBToStore: ${err.message}`);\n  }\n}\nexport const getDBListFromStore = async (store: LocalForage): Promise<string[]> => {\n  try {\n    const retDbList: string[] = await store.keys();\n    return Promise.resolve(retDbList);\n  } catch (err) {\n    return Promise.reject(`GetDBListFromStore: ${err.message}`);\n  }\n}\n"]}