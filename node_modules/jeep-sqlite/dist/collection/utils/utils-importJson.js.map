{"version":3,"file":"utils-importJson.js","sourceRoot":"","sources":["../../src/utils/utils-importJson.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from '@stencil/core';\n\nimport { JsonSQLite, JsonProgressListener, JsonView } from '../interfaces/interfaces';\nimport { setVersion, beginTransaction, rollbackTransaction, commitTransaction,\n  execute, dbChanges, run, queryAll, isTableExists } from './utils-sqlite';\nimport { dropAll } from './utils-drop';\nimport { getTableColumnNamesTypes, getValues } from './utils-json';\n\nexport const createDatabaseSchema = async (db: any, jsonData: JsonSQLite): Promise<number> => {\n  let changes = -1;\n  const version: number = jsonData.version;\n  try {\n      // set User Version PRAGMA\n      await setVersion(db, version);\n      // DROP ALL when mode=\"full\"\n      if (jsonData.mode === 'full') {\n        await dropAll(db);\n      }\n      // create database schema\n      changes = await createSchema(db, jsonData);\n      return Promise.resolve(changes);\n\n  } catch (err) {\n    return Promise.reject(\n      new Error('CreateDatabaseSchema: ' + `${err.message}`),\n    );\n  }\n}\nexport const createSchema = async (db: any, jsonData: any): Promise<number> => {\n  // create the database schema\n  let changes = 0;\n  try {\n    // start a transaction\n    await beginTransaction(db, true);\n  } catch (err) {\n    return Promise.reject(new Error(`CreateSchema: ${err.message}`));\n  }\n\n  const stmts = await createSchemaStatement(jsonData);\n  if (stmts.length > 0) {\n    const schemaStmt: string = stmts.join('\\n');\n    try {\n      changes = await execute(db, schemaStmt, true);\n      if (changes < 0) {\n        try {\n          await rollbackTransaction(db, true);\n        } catch (err) {\n          return Promise.reject(\n            new Error('CreateSchema: changes < 0 ' + `${err.message}`),\n          );\n        }\n      }\n    } catch (err) {\n      const msg = err.message;\n      try {\n        await rollbackTransaction(db, true);\n        return Promise.reject(new Error(`CreateSchema: ${msg}`));\n      } catch (err) {\n        return Promise.reject(\n          new Error('CreateSchema: changes < 0 ' + `${err.message}: ${msg}`),\n        );\n      }\n    }\n  }\n  try {\n    await commitTransaction(db, true);\n    return Promise.resolve(changes);\n  } catch (err) {\n    return Promise.reject(\n      new Error('CreateSchema: commit ' + `${err.message}`),\n    );\n  }\n}\nexport const createSchemaStatement = async (jsonData: any): Promise<string[]> => {\n  const statements: string[] = [];\n  let isLastModified = false;\n  let isSqlDeleted = false;\n\n  // Prepare the statement to execute\n  try {\n    for (const jTable of jsonData.tables) {\n      if (jTable.schema != null && jTable.schema.length >= 1) {\n        // create table\n        statements.push('CREATE TABLE IF NOT EXISTS ' + `${jTable.name} (`);\n        for (let j = 0; j < jTable.schema.length; j++) {\n          if (j === jTable.schema.length - 1) {\n            if (jTable.schema[j].column) {\n              statements.push(\n                `${jTable.schema[j].column} ${jTable.schema[j].value}`,\n              );\n              if(jTable.schema[j].column === \"last_modified\") {\n                isLastModified = true;\n              }\n              if(jTable.schema[j].column === \"sql_deleted\") {\n                isSqlDeleted = true;\n              }\n            } else if (jTable.schema[j].foreignkey) {\n              statements.push(\n                `FOREIGN KEY (${jTable.schema[j].foreignkey}) ${jTable.schema[j].value}`,\n              );\n            } else if (jTable.schema[j].constraint) {\n              statements.push(\n                `CONSTRAINT ${jTable.schema[j].constraint} ${jTable.schema[j].value}`,\n              );\n            }\n          } else {\n            if (jTable.schema[j].column) {\n              statements.push(\n                `${jTable.schema[j].column} ${jTable.schema[j].value},`,\n              );\n            } else if (jTable.schema[j].foreignkey) {\n              statements.push(\n                `FOREIGN KEY (${jTable.schema[j].foreignkey}) ${jTable.schema[j].value},`,\n              );\n            } else if (jTable.schema[j].primarykey) {\n              statements.push(\n                `FOREIGN KEY ${jTable.schema[j].value},`,\n              );\n            } else if (jTable.schema[j].constraint) {\n              statements.push(\n                `CONSTRAINT ${jTable.schema[j].constraint} ${jTable.schema[j].value},`,\n              );\n            }\n          }\n        }\n        statements.push(');');\n        if(isLastModified && isSqlDeleted) {\n          // create trigger last_modified associated with the table\n          let trig = 'CREATE TRIGGER IF NOT EXISTS ';\n          trig += `${jTable.name}`;\n          trig += `_trigger_last_modified `;\n          trig += `AFTER UPDATE ON ${jTable.name} `;\n          trig += 'FOR EACH ROW WHEN NEW.last_modified < ';\n          trig += 'OLD.last_modified BEGIN UPDATE ';\n          trig += `${jTable.name} `;\n          trig += `SET last_modified = `;\n          trig += \"(strftime('%s','now')) WHERE id=OLD.id; END;\";\n          statements.push(trig);\n        }\n      }\n\n      if (jTable.indexes != null && jTable.indexes.length >= 1) {\n        for (const jIndex of jTable.indexes) {\n          const tableName = jTable.name;\n          let stmt = `CREATE ${\n            Object.keys(jIndex).includes('mode') ? jIndex.mode + ' ' : ''\n          } INDEX IF NOT EXISTS `;\n          stmt += `${jIndex.name} ON ${tableName} (${jIndex.value});`;\n          statements.push(stmt);\n        }\n      }\n      if (jTable.triggers != null && jTable.triggers.length >= 1) {\n        for (const jTrg of jTable.triggers) {\n          const tableName = jTable.name;\n          if (jTrg.timeevent.toUpperCase().endsWith(\" ON\")) {\n            jTrg.timeevent = jTrg.timeevent.substring(0, jTrg.timeevent.length - 3);\n        }\n\n          let stmt = `CREATE TRIGGER IF NOT EXISTS `;\n          stmt += `${jTrg.name} ${jTrg.timeevent} ON ${tableName} `;\n          if (jTrg.condition) stmt += `${jTrg.condition} `;\n          stmt += `${jTrg.logic};`;\n          statements.push(stmt);\n        }\n      }\n    }\n    return Promise.resolve(statements);\n  } catch (err) {\n    return Promise.reject(err);\n  }\n}\nexport const createTablesData = async (db: any, jsonData: JsonSQLite,\n                                       importProgress: EventEmitter<JsonProgressListener>): Promise<number> => {\n  let changes = 0;\n  let isValue = false;\n  let lastId = -1;\n  let msg = '';\n  let initChanges = -1;\n  try {\n    initChanges = await dbChanges(db);\n    // start a transaction\n    await beginTransaction(db, true);\n  } catch (err) {\n    return Promise.reject(new Error(`createTablesData: ${err.message}`));\n  }\n  for (const jTable of jsonData.tables) {\n    if (jTable.values != null && jTable.values.length >= 1) {\n      // Create the table's data\n      try {\n        lastId = await createTableData(db, jTable, jsonData.mode);\n        const msg: string = `create table data ${jTable.name}`;\n        importProgress.emit({progress: msg});\n        if (lastId < 0) break;\n        isValue = true;\n      } catch (err) {\n        msg = err.message;\n        isValue = false;\n        break;\n      }\n    }\n  }\n  if (isValue) {\n    try {\n      await commitTransaction(db, true);\n      changes = (await dbChanges(db)) - initChanges;\n      return Promise.resolve(changes);\n    } catch (err) {\n      return Promise.reject(\n        new Error('CreateTablesData: ' + `${err.message}`),\n      );\n    }\n  } else {\n    if(msg.length > 0) {\n      try {\n        await rollbackTransaction(db, true);\n        return Promise.reject(new Error(`CreateTablesData: ${msg}`));\n      } catch (err) {\n        return Promise.reject(\n          new Error('CreateTablesData: ' + `${err.message}: ${msg}`),\n        );\n      }\n    } else {\n      // case were no values given\n      return Promise.resolve(0);\n    }\n}\n}\nexport const createTableData = async (db: any, table: any, mode: string): Promise<number> => {\n  let lastId = -1;\n  try {\n    // Check if the table exists\n    const tableExists = await isTableExists(db, table.name);\n    if (!tableExists) {\n      return Promise.reject(\n        new Error('CreateTableData: Table ' + `${table.name} does not exist`),\n      );\n    }\n\n    // Get the column names and types\n    const tableNamesTypes: any = await getTableColumnNamesTypes(db, table.name);\n    const tableColumnTypes: string[] = tableNamesTypes.types;\n    const tableColumnNames: string[] = tableNamesTypes.names;\n    if (tableColumnTypes.length === 0) {\n      return Promise.reject(\n        new Error(\n          'CreateTableData: Table ' + `${table.name} info does not exist`,\n        ),\n      );\n    }\n    // Loop on Table Values\n    for (let j = 0; j < table.values.length; j++) {\n      let row = table.values[j];\n      let isRun: boolean = true;\n      const stmt: string = await createRowStatement(db, tableColumnNames, row,\n                                                    j, table.name, mode);\n      isRun = await checkUpdate(db, stmt, row, table.name, tableColumnNames);\n      if(isRun) {\n        if(stmt.substring(0,6).toUpperCase() === \"DELETE\") {\n          row = [];\n        }\n        lastId = await run(db, stmt, row, true);\n        if (lastId < 0) {\n          return Promise.reject(new Error('CreateTableData: lastId < 0'));\n        }\n      } else {\n        lastId = 0;\n      }\n    }\n    return Promise.resolve(lastId);\n  } catch (err) {\n    return Promise.reject(new Error(`CreateTableData: ${err.message}`));\n  }\n}\nexport const createRowStatement = async (db: any, tColNames: string[],\n                                         row: any[], j: number, tableName: string,\n                                         mode: string): Promise<string> => {\n\n  // Check the row number of columns\n  if (row.length != tColNames.length || row.length ===0 || tColNames.length === 0) {\n    return Promise.reject(\n      new Error(\n        `CreateRowStatement: Table ${tableName} ` +\n          `values row ${j} not correct length`,\n      ),\n    );\n  }\n  try {\n    const retisIdExists: boolean = await isIdExists(db, tableName, tColNames[0], row[0]);\n    let stmt: string;\n    if (mode === 'full' || (mode === 'partial' && !retisIdExists)) {\n      // Insert\n      const nameString: string = tColNames.join();\n      const questionMarkString = await createQuestionMarkString(tColNames.length);\n      stmt = `INSERT INTO ${tableName} (${nameString}) VALUES (`;\n      stmt += `${questionMarkString});`;\n\n    } else {\n      // Update or Delete\n      let isUpdate = true\n      const isColDeleted = (element: string) => element === `sql_deleted`;\n      const idxDelete = tColNames.findIndex(isColDeleted);\n      if(idxDelete >= 0) {\n        if(row[idxDelete] === 1) {\n          isUpdate = false;\n          stmt =\n          `DELETE FROM ${tableName} WHERE `;\n          if( typeof row[0] == \"string\") {\n            stmt +=\n            `${tColNames[0]} = '${row[0]}';`;\n          } else {\n            stmt +=\n            `${tColNames[0]} = ${row[0]};`;\n          }\n        }\n      }\n      if(isUpdate) {\n        // Update\n        const setString: string = await setNameForUpdate(tColNames);\n        if (setString.length === 0) {\n          return Promise.reject(\n            new Error(\n              `CreateRowStatement: Table ${tableName} ` +\n                `values row ${j} not set to String`,\n            ),\n          );\n        }\n        stmt =\n          `UPDATE ${tableName} SET ${setString} WHERE `;\n        if( typeof row[0] == \"string\") {\n          stmt +=\n          `${tColNames[0]} = '${row[0]}';`;\n        } else {\n          stmt +=\n          `${tColNames[0]} = ${row[0]};`;\n        }\n      }\n    }\n    return Promise.resolve(stmt);\n  } catch (err) {\n    return Promise.reject(new Error(`CreateRowStatement: ${err.message}`));\n  }\n}\nexport const checkUpdate = async (db: any, stmt: string, values: any[], tbName: string,\n                                  tColNames: string[]): Promise<boolean> => {\n  let isRun: boolean = true;\n  if (stmt.substring(0, 6) === \"UPDATE\") {\n    try {\n      let query = `SELECT * FROM ${tbName} WHERE `;\n      if( typeof values[0] == \"string\") {\n        query +=\n        `${tColNames[0]} = '${values[0]}';`;\n      } else {\n        query +=\n        `${tColNames[0]} = ${values[0]};`;\n      }\n\n\n      const resQuery: any[] = await getValues(db, query, tbName);\n      let resValues: any[] = [];\n      if(resQuery.length > 0) {\n        resValues = resQuery[0];\n      }\n      if(values.length > 0  && resValues.length > 0\n                            && values.length === resValues.length) {\n        for(let i = 0; i < values.length; i++) {\n          if(values[i] !== resValues[i]) {\n            return Promise.resolve(true);\n          }\n        }\n        return Promise.resolve(false);\n      } else {\n        const msg = \"Both arrays not the same length\"\n        return Promise.reject(new Error(`CheckUpdate: ${msg}`));\n      }\n    } catch (err) {\n      return Promise.reject(new Error(`CheckUpdate: ${err.message}`));\n    }\n  } else {\n    return Promise.resolve(isRun);\n  }\n}\nexport const isIdExists = async (db: any, dbName: string, firstColumnName: string,\n                                 key: any): Promise<boolean> => {\n  let ret = false;\n  let query: string =\n    `SELECT ${firstColumnName} FROM ` +\n    `${dbName} WHERE ${firstColumnName} = `;\n  if (typeof key === 'number') query += `${key};`;\n  if (typeof key === 'string') query += `'${key}';`;\n\n  try {\n    const resQuery: any[] = await queryAll(db, query, []);\n    if (resQuery.length === 1) ret = true;\n    return Promise.resolve(ret);\n  } catch (err) {\n    return Promise.reject(new Error(`IsIdExists: ${err.message}`));\n  }\n}\nexport const isType = async (type: string, value: any): Promise<void> => {\n  let ret = false;\n  if (type === 'NULL' && typeof value === 'object') ret = true;\n  if (type === 'TEXT' && typeof value === 'string') ret = true;\n  if (type === 'INTEGER' && typeof value === 'number') ret = true;\n  if (type === 'REAL' && typeof value === 'number') ret = true;\n  if (type === 'BLOB' && typeof value === 'string') ret = true;\n  if (ret) {\n    return Promise.resolve();\n  } else {\n    return Promise.reject(new Error('IsType: not a SQL Type'));\n  }\n}\nexport const checkColumnTypes = async (tableTypes: any[], rowValues: any[]): Promise<void> => {\n  for (let i = 0; i < rowValues.length; i++) {\n    if (rowValues[i] != null) {\n      try {\n        await isType(tableTypes[i], rowValues[i]);\n      } catch (err) {\n        return Promise.reject(new Error('CheckColumnTypes: Type not found'));\n      }\n    }\n  }\n  return Promise.resolve();\n}\nexport const createQuestionMarkString = async (length: number): Promise<string> => {\n  let retString = '';\n  for (let i = 0; i < length; i++) {\n    retString += '?,';\n  }\n  if (retString.length > 1) {\n    retString = retString.slice(0, -1);\n    return Promise.resolve(retString);\n  } else {\n    return Promise.reject(new Error('CreateQuestionMarkString: length = 0'));\n  }\n}\nexport const setNameForUpdate = async (names: string[]): Promise<string> => {\n  let retString = '';\n  for (const name of names) {\n    retString += `${name} = ? ,`;\n  }\n  if (retString.length > 1) {\n    retString = retString.slice(0, -1);\n    return Promise.resolve(retString);\n  } else {\n    return Promise.reject(new Error('SetNameForUpdate: length = 0'));\n  }\n}\n\nexport const createView = async (mDB: any, view: JsonView): Promise<void> => {\n  const stmt = `CREATE VIEW IF NOT EXISTS ${view.name} AS ${view.value};`;\n  try {\n    const changes = await execute(mDB, stmt, true);\n    if (changes < 0) {\n      return Promise.reject(new Error(`CreateView: ${view.name} failed`));\n    }\n    return Promise.resolve();\n  } catch (err) {\n    return Promise.reject(new Error(`CreateView: ${err.message}`));\n  }\n}\nexport const createViews = async (mDB: any, jsonData: JsonSQLite): Promise<number> => {\n  let isView = false;\n  let msg = '';\n  let initChanges = -1;\n  let changes = -1;\n  try {\n    initChanges = await dbChanges(mDB);\n    // start a transaction\n    await beginTransaction(mDB, true);\n  } catch (err) {\n    return Promise.reject(new Error(`createViews: ${err.message}`));\n  }\n  for (const jView of jsonData.views) {\n    if (jView.value != null) {\n      // Create the view\n      try {\n        await createView(mDB, jView);\n        isView = true;\n      } catch (err) {\n        msg = err.message;\n        isView = false;\n        break;\n      }\n    }\n  }\n  if (isView) {\n    try {\n      await commitTransaction(mDB, true);\n      changes = (await dbChanges(mDB)) - initChanges;\n      return Promise.resolve(changes);\n    } catch (err) {\n      return Promise.reject(new Error('createViews: ' + `${err.message}`));\n    }\n  } else {\n    if (msg.length > 0) {\n      try {\n        await rollbackTransaction(mDB, true);\n        return Promise.reject(new Error(`createViews: ${msg}`));\n      } catch (err) {\n        return Promise.reject(\n          new Error('createViews: ' + `${err.message}: ${msg}`),\n        );\n      }\n    } else {\n      // case were no views given\n      return Promise.resolve(0);\n    }\n  }\n}\n\n"]}