{"version":3,"file":"errorhandler.d.ts","sources":["errorhandler.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import type { ErrorHandler as AngularErrorHandler } from '@angular/core';\nimport * as Sentry from '@sentry/browser';\n/**\n * Options used to configure the behavior of the Angular ErrorHandler.\n */\nexport interface ErrorHandlerOptions {\n    logErrors?: boolean;\n    showDialog?: boolean;\n    dialogOptions?: Sentry.ReportDialogOptions;\n    /**\n     * Custom implementation of error extraction from the raw value captured by the Angular.\n     * @param error Value captured by Angular's ErrorHandler provider\n     * @param defaultExtractor Default implementation that can be used as the fallback in case of custom implementation\n     */\n    extractor?(error: unknown, defaultExtractor: (error: unknown) => unknown): unknown;\n}\n/**\n * Implementation of Angular's ErrorHandler provider that can be used as a drop-in replacement for the stock one.\n */\ndeclare class SentryErrorHandler implements AngularErrorHandler {\n    protected readonly _options: ErrorHandlerOptions;\n    constructor(options?: ErrorHandlerOptions);\n    /**\n     * Method called for every value captured through the ErrorHandler\n     */\n    handleError(error: unknown): void;\n    /**\n     * Used to pull a desired value that will be used to capture an event out of the raw value captured by ErrorHandler.\n     */\n    protected _extractError(error: unknown): unknown;\n    /**\n     * Default implementation of error extraction that handles default error wrapping, HTTP responses, ErrorEvent and few other known cases.\n     */\n    protected _defaultExtractor(errorCandidate: unknown): unknown;\n}\n/**\n * Factory function that creates an instance of a preconfigured ErrorHandler provider.\n */\ndeclare function createErrorHandler(config?: ErrorHandlerOptions): SentryErrorHandler;\nexport { createErrorHandler, SentryErrorHandler };\n"]}