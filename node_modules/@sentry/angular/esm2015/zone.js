// There're 2 types of Angular applications:
// 1) zone-full (by default)
// 2) zone-less
// The developer can avoid importing the `zone.js` package and tells Angular that
// he is responsible for running the change detection by himself. This is done by
// "nooping" the zone through `CompilerOptions` when bootstrapping the root module.
// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
const isNgZoneEnabled = typeof Zone !== 'undefined' && !!Zone.current;
/**
 * The function that does the same job as `NgZone.runOutsideAngular`.
 */
export function runOutsideAngular(callback) {
    // The `Zone.root.run` basically will run the `callback` in the most parent zone.
    // Any asynchronous API used inside the `callback` won't catch Angular's zone
    // since `Zone.current` will reference `Zone.root`.
    // The Angular's zone is forked from the `Zone.root`. In this case, `zone.js` won't
    // trigger change detection, and `ApplicationRef.tick()` will not be run.
    // Caretaker note: we're using `Zone.root` except `NgZone.runOutsideAngular` since this
    // will require injecting the `NgZone` facade. That will create a breaking change for
    // projects already using the `@sentry/angular`.
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    return isNgZoneEnabled ? Zone.root.run(callback) : callback();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiem9uZS5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS9ydW5uZXIvd29yay9zZW50cnktamF2YXNjcmlwdC9zZW50cnktamF2YXNjcmlwdC9wYWNrYWdlcy9hbmd1bGFyL3NyYy8iLCJzb3VyY2VzIjpbInpvbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsNENBQTRDO0FBQzVDLDRCQUE0QjtBQUM1QixlQUFlO0FBQ2YsaUZBQWlGO0FBQ2pGLGlGQUFpRjtBQUNqRixtRkFBbUY7QUFDbkYsc0VBQXNFO0FBQ3RFLE1BQU0sZUFBZSxHQUFHLE9BQU8sSUFBSSxLQUFLLFdBQVcsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUV0RTs7R0FFRztBQUNILE1BQU0sVUFBVSxpQkFBaUIsQ0FBSSxRQUFpQjtJQUNwRCxpRkFBaUY7SUFDakYsNkVBQTZFO0lBQzdFLG1EQUFtRDtJQUNuRCxtRkFBbUY7SUFDbkYseUVBQXlFO0lBQ3pFLHVGQUF1RjtJQUN2RixxRkFBcUY7SUFDckYsZ0RBQWdEO0lBQ2hELHNFQUFzRTtJQUN0RSxPQUFPLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ2hFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGF0J3MgdGhlIGBnbG9iYWwuWm9uZWAgZXhwb3NlZCB3aGVuIHRoZSBgem9uZS5qc2AgcGFja2FnZSBpcyB1c2VkLlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmRlY2xhcmUgY29uc3QgWm9uZTogYW55O1xuXG4vLyBUaGVyZSdyZSAyIHR5cGVzIG9mIEFuZ3VsYXIgYXBwbGljYXRpb25zOlxuLy8gMSkgem9uZS1mdWxsIChieSBkZWZhdWx0KVxuLy8gMikgem9uZS1sZXNzXG4vLyBUaGUgZGV2ZWxvcGVyIGNhbiBhdm9pZCBpbXBvcnRpbmcgdGhlIGB6b25lLmpzYCBwYWNrYWdlIGFuZCB0ZWxscyBBbmd1bGFyIHRoYXRcbi8vIGhlIGlzIHJlc3BvbnNpYmxlIGZvciBydW5uaW5nIHRoZSBjaGFuZ2UgZGV0ZWN0aW9uIGJ5IGhpbXNlbGYuIFRoaXMgaXMgZG9uZSBieVxuLy8gXCJub29waW5nXCIgdGhlIHpvbmUgdGhyb3VnaCBgQ29tcGlsZXJPcHRpb25zYCB3aGVuIGJvb3RzdHJhcHBpbmcgdGhlIHJvb3QgbW9kdWxlLlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuY29uc3QgaXNOZ1pvbmVFbmFibGVkID0gdHlwZW9mIFpvbmUgIT09ICd1bmRlZmluZWQnICYmICEhWm9uZS5jdXJyZW50O1xuXG4vKipcbiAqIFRoZSBmdW5jdGlvbiB0aGF0IGRvZXMgdGhlIHNhbWUgam9iIGFzIGBOZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXJgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcnVuT3V0c2lkZUFuZ3VsYXI8VD4oY2FsbGJhY2s6ICgpID0+IFQpOiBUIHtcbiAgLy8gVGhlIGBab25lLnJvb3QucnVuYCBiYXNpY2FsbHkgd2lsbCBydW4gdGhlIGBjYWxsYmFja2AgaW4gdGhlIG1vc3QgcGFyZW50IHpvbmUuXG4gIC8vIEFueSBhc3luY2hyb25vdXMgQVBJIHVzZWQgaW5zaWRlIHRoZSBgY2FsbGJhY2tgIHdvbid0IGNhdGNoIEFuZ3VsYXIncyB6b25lXG4gIC8vIHNpbmNlIGBab25lLmN1cnJlbnRgIHdpbGwgcmVmZXJlbmNlIGBab25lLnJvb3RgLlxuICAvLyBUaGUgQW5ndWxhcidzIHpvbmUgaXMgZm9ya2VkIGZyb20gdGhlIGBab25lLnJvb3RgLiBJbiB0aGlzIGNhc2UsIGB6b25lLmpzYCB3b24ndFxuICAvLyB0cmlnZ2VyIGNoYW5nZSBkZXRlY3Rpb24sIGFuZCBgQXBwbGljYXRpb25SZWYudGljaygpYCB3aWxsIG5vdCBiZSBydW4uXG4gIC8vIENhcmV0YWtlciBub3RlOiB3ZSdyZSB1c2luZyBgWm9uZS5yb290YCBleGNlcHQgYE5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcmAgc2luY2UgdGhpc1xuICAvLyB3aWxsIHJlcXVpcmUgaW5qZWN0aW5nIHRoZSBgTmdab25lYCBmYWNhZGUuIFRoYXQgd2lsbCBjcmVhdGUgYSBicmVha2luZyBjaGFuZ2UgZm9yXG4gIC8vIHByb2plY3RzIGFscmVhZHkgdXNpbmcgdGhlIGBAc2VudHJ5L2FuZ3VsYXJgLlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gIHJldHVybiBpc05nWm9uZUVuYWJsZWQgPyBab25lLnJvb3QucnVuKGNhbGxiYWNrKSA6IGNhbGxiYWNrKCk7XG59XG4iXX0=