{"version":3,"file":"tracing.d.ts","sources":["tracing.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import type { AfterViewInit, OnDestroy, OnInit } from '@angular/core';\nimport type { ActivatedRouteSnapshot, Event, Router } from '@angular/router';\nimport type { Transaction, TransactionContext } from '@sentry/types';\nimport type { Observable } from 'rxjs';\n/**\n * Creates routing instrumentation for Angular Router.\n */\nexport declare function routingInstrumentation(customStartTransaction: (context: TransactionContext) => Transaction | undefined, startTransactionOnPageLoad?: boolean, startTransactionOnLocationChange?: boolean): void;\nexport declare const instrumentAngularRouting: typeof routingInstrumentation;\n/**\n * Grabs active transaction off scope\n */\nexport declare function getActiveTransaction(): Transaction | undefined;\n/**\n * Angular's Service responsible for hooking into Angular Router and tracking current navigation process.\n * Creates a new transaction for every route change and measures a duration of routing process.\n */\nexport declare class TraceService implements OnDestroy {\n    private readonly _router;\n    navStart$: Observable<Event>;\n    resEnd$: Observable<Event>;\n    navEnd$: Observable<Event>;\n    private _routingSpan;\n    private _subscription;\n    constructor(_router: Router);\n    /**\n     * This is used to prevent memory leaks when the root view is created and destroyed multiple times,\n     * since `subscribe` callbacks capture `this` and prevent many resources from being GC'd.\n     */\n    ngOnDestroy(): void;\n}\n/**\n * A directive that can be used to capture initialization lifecycle of the whole component.\n */\nexport declare class TraceDirective implements OnInit, AfterViewInit {\n    componentName?: string;\n    private _tracingSpan?;\n    /**\n     * Implementation of OnInit lifecycle method\n     * @inheritdoc\n     */\n    ngOnInit(): void;\n    /**\n     * Implementation of AfterViewInit lifecycle method\n     * @inheritdoc\n     */\n    ngAfterViewInit(): void;\n}\n/**\n * A module serves as a single compilation unit for the `TraceDirective` and can be re-used by any other module.\n */\nexport declare class TraceModule {\n}\n/**\n * Decorator function that can be used to capture initialization lifecycle of the whole component.\n */\nexport declare function TraceClassDecorator(): ClassDecorator;\n/**\n * Decorator function that can be used to capture a single lifecycle methods of the component.\n */\nexport declare function TraceMethodDecorator(): MethodDecorator;\n/**\n * Takes the parameterized route from a given ActivatedRouteSnapshot and concatenates the snapshot's\n * child route with its parent to produce the complete parameterized URL of the activated route.\n * This happens recursively until the last child (i.e. the end of the URL) is reached.\n *\n * @param route the ActivatedRouteSnapshot of which its path and its child's path is concantenated\n *\n * @returns the concatenated parameterzited route string\n */\nexport declare function getParameterizedRouteFromSnapshot(route?: ActivatedRouteSnapshot | null): string;\n"]}