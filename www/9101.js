"use strict";(self.webpackChunkapp=self.webpackChunkapp||[]).push([[9101],{535:(b,h,m)=>{m.d(h,{y:()=>x});var a=m(5861),v=m(7916);function y(l){return d.apply(this,arguments)}function d(){return(d=(0,a.Z)(function*(l){try{if((yield l.isExists()).result){const e=l.getConnectionDBName();return console.log("$$$ database "+e+" before delete"),yield l.delete(),console.log("$$$ database "+e+" after delete "),Promise.resolve()}return Promise.resolve()}catch(r){return Promise.reject(r)}})).apply(this,arguments)}function f(){return(f=(0,a.Z)(function*(l){try{return!!(yield l.isExists()).result}catch(r){return Promise.reject(r)}})).apply(this,arguments)}const g={database:"patient-strength-db",version:1,encrypted:!1,mode:"full",tables:[{name:"tage",schema:[{column:"id",value:"INTEGER PRIMARY KEY NOT NULL"},{column:"date",value:"TEXT"},{column:"last_modified",value:"TEXT DEFAULT (datetime('now', 'localtime'))"}],values:[]},{name:"symptome",schema:[{column:"id",value:"INTEGER PRIMARY KEY NOT NULL"},{column:"tageid",value:"INTEGER"},{column:"symptom_names_checkboxes",value:"TEXT"},{column:"symptom_names",value:"TEXT"},{column:"husten_value",value:"INTEGER"},{column:"fieber_value",value:"INTEGER"},{column:"fatigue_value",value:"INTEGER"},{column:"kurzatmigkeit_value",value:"INTEGER"},{column:"brustschmerzen_value",value:"INTEGER"},{column:"kopfschmerzen_value",value:"INTEGER"},{column:"geschmacksverlust_value",value:"INTEGER"},{column:"neurologische_stoerung_value",value:"INTEGER"},{column:"muskelschmerzen_value",value:"INTEGER"},{column:"hautausschlag_value",value:"INTEGER"},{column:"missempfindungen_value",value:"INTEGER"},{column:"schwindel_value",value:"INTEGER"},{column:"gedaechtniseinschraenkungen_value",value:"INTEGER"},{column:"leseeinschraenkungen_value",value:"INTEGER"},{column:"last_modified",value:"TEXT DEFAULT (datetime('now', 'localtime'))"},{foreignkey:"tageid",value:"REFERENCES tage(id) ON DELETE SET DEFAULT"}],values:[]},{name:"essen",schema:[{column:"id",value:"INTEGER PRIMARY KEY NOT NULL"},{column:"tageid",value:"INTEGER"},{column:"vormittag",value:"TEXT"},{column:"mittag",value:"TEXT"},{column:"abend",value:"TEXT"},{column:"medikamente_value",value:"TEXT"},{column:"last_modified",value:"TEXT DEFAULT (datetime('now', 'localtime'))"},{foreignkey:"tageid",value:"REFERENCES tage(id) ON DELETE SET DEFAULT"}],values:[]},{name:"tagesform",schema:[{column:"id",value:"INTEGER PRIMARY KEY NOT NULL"},{column:"tageid",value:"INTEGER"},{column:"tagesform_value",value:"INTEGER"},{column:"erschoepfungsart_value",value:"INTEGER"},{column:"schlaf_value",value:"INTEGER"},{column:"stimmung_value",value:"INTEGER"},{column:"last_modified",value:"TEXT DEFAULT (datetime('now', 'localtime'))"},{foreignkey:"tageid",value:"REFERENCES tage(id) ON DELETE SET DEFAULT"}],values:[]},{name:"aktivitaeten",schema:[{column:"id",value:"INTEGER PRIMARY KEY NOT NULL"},{column:"tageid",value:"INTEGER"},{column:"aktivitaeten_names_checkboxes",value:"TEXT"},{column:"aktivitaeten_names",value:"TEXT"},{column:"sport_value",value:"INTEGER"},{column:"arbeit_value",value:"INTEGER"},{column:"hausarbeit_value",value:"INTEGER"},{column:"entspannung_value",value:"INTEGER"},{column:"last_modified",value:"TEXT DEFAULT (datetime('now', 'localtime'))"},{foreignkey:"tageid",value:"REFERENCES tage(id) ON DELETE SET DEFAULT"}],values:[]}]};function S(l){return l.replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase()}class N{constructor(r,e){this.db=r,e&&(this.tableName=e)}create(r,e){return(0,a.Z)(function*(){throw new Error("Method not implemented.")})()}createOneEmpty(r,e){var t=this;return(0,a.Z)(function*(){e&&(t.tableName=e);const n=`INSERT OR IGNORE INTO ${t.tableName} (tageid) VALUES (${r});`,s=yield t.db.execute(n);if(void 0===s)throw new Error("Execution failed:"+s);return s})()}update(r,e,t){var n=this;return(0,a.Z)(function*(){t&&(n.tableName=t);const s=`UPDATE ${n.tableName} SET ${n.mapObjectToUpdateStatement(e)} WHERE tageid = ${r};`,o=yield n.db.execute(s);if(void 0===o)throw new Error("Execution failed:"+s);return o})()}delete(r,e){var t=this;return(0,a.Z)(function*(){e&&(t.tableName=e);const n=`DELETE FROM ${t.tableName} WHERE tageid = '${r}';`,s=yield t.db.execute(n);if(void 0===s)throw new Error("Execution failed:"+s);return s})()}findAll(r){var e=this;return(0,a.Z)(function*(){const t=performance.now();r&&(e.tableName=r);const n=`SELECT * FROM ${e.tableName};`,s=yield e.db.query(n);if(void 0===s)throw new Error("Query failed:"+n);{const o=performance.now();return console.log("Query took "+(o-t)+" milliseconds."),s.values.map(i=>e.mapObjectToEntity(i))}})()}findAllInRange(r,e){var t=this;return(0,a.Z)(function*(){const n=performance.now();e&&(t.tableName=e);const s=`SELECT * FROM ${t.tableName} WHERE tageid IN (${r.join(",")});`,o=yield t.db.query(s);if(void 0===o)throw new Error("Query failed:"+s);{const i=performance.now();return console.log("Query took "+(i-n)+" milliseconds."),o.values.map(u=>t.mapObjectToEntity(u))}})()}findOne(r,e){var t=this;return(0,a.Z)(function*(){e&&(t.tableName=e);const n=`SELECT * FROM ${t.tableName} WHERE ${t.tableName}.tageid = ${r};`,s=yield t.db.query(n);if(void 0===s)throw new Error("Execution failed:"+n);return{values:s.values.map(o=>t.mapObjectToEntity(o))}})()}mapObjectToEntity(r){const e={};for(const t in r)if(r.hasOwnProperty(t)){const n=r[t];e[(l=t,l.replace(/(\_[a-z])/g,function(r){return r.toUpperCase().replace("_","")}))]=n}var l;return e}mapEntityToObject(r){const e={};for(const t in r)if(r.hasOwnProperty(t)){const n=r[t];e[S(t)]=n}return e}mapObjectToUpdateStatement(r){let e="";for(const t in r)if("id"!==t&&"tageid"!==t)if(r.hasOwnProperty(t)){const n=r[t];e+=`${S(t)} = '${n}', `}else"lastModified"===t&&(e+=`${t} = '${(new Date).toISOString().split(".")[0]}'`);return e.substring(0,e.length-2)}countAll(r){var e=this;return(0,a.Z)(function*(){const t=`SELECT COUNT(*) AS count FROM ${e.tableName};`,n=yield e.db.query(t);if(void 0===n)throw new Error("Query failed:"+t);return n})()}}class A extends N{constructor(r){super(r,"essen")}}class L extends N{constructor(r){super(r,"aktivitaeten")}}class C extends N{constructor(r){super(r,"symptome")}}class k extends N{constructor(r){super(r,"tagesform")}}var _=m(2096),$=m(636),G=m(4323);let x=(()=>{class l{constructor(e,t){this.sqliteService=e,this.detailService=t,this.dbName="",this.export=null}setWantedBackupsNumber(e){this.wantedBackupsNumber=e,console.log(this.wantedBackupsNumber),localStorage.setItem("wantedBackupsNumber",e.toString())}getWantedBackupsNumber(){const e=localStorage.getItem("wantedBackupsNumber");return this.wantedBackupsNumber=Number(e),console.log(this.wantedBackupsNumber),this.wantedBackupsNumber}getDatabaseExport(e){return v.f4.exportToJson({database:this.dbName,jsonexportmode:e})}checkIsDatabaseConnection(){var e=this;return(0,a.Z)(function*(){const t=yield e.sqliteService.isConnection(e.dbName);return console.log(">>>> checkIsDatabaseConnection: "+t.result+" for db: "+e.dbName),t.result})()}openDatabaseConnectionAndReturnDatabaseBoolean(){var e=this;return(0,a.Z)(function*(){console.log(">>>> openDatabaseConnection start"),e.dbName=g.database,console.log(">>>> openDatabaseConnection this.dbName: "+e.dbName);const t=yield e.checkIsDatabaseConnection();if(!1===t){console.log(">>>> checkExistingConnection: "+t);const s=yield e.getDatabaseVersionFromLocalStorage();if(console.log(">>>> currentDatabaseVersion: "+s),e.db=yield e.sqliteService.createConnection(e.dbName,!1,"no-encryption",s),console.log(">>>> this.db createConnection:  "+e.db),e.essenRepository=new A(e.db),e.symptomRepository=new C(e.db),e.aktivitaetRepository=new L(e.db),e.tagesformRepository=new k(e.db),null===e.db)return console.log(">>>> this.db = null -> rejecting Promise:  "+e.db),Promise.reject(new Error("CreateConnection"+e.dbName+"failed"))}else{if(!0!==t)return console.log(">>>> currentDatabaseVersion: "+t),console.log(">>>> Oh no! createConneciton failed -> rejecting Promise"),Promise.reject(new Error("CreateConnection"+e.dbName+"failed"));console.log(">>>> currentDatabaseVersion: "+t),console.log(">>>> Hurray! DatabaseConnection exists")}const n=yield function R(l){return f.apply(this,arguments)}(e.db);return console.log(">>>> dbExists: "+n),!0===n?(console.log(">>>> dbExists: "+n),console.log(">>>> Hurray! Database exists"),n):!1===n?(console.log(">>>> dbExists: "+n),console.log(">>>> Oh no! No database"),n):(console.log(">>>> dbExists: "+n),console.log(">>>> Oh no! Database error or missing -> rejecting Promise"),Promise.reject(new Error("Database error or missing")))})()}createDatabaseFromJSON(){var e=this;return(0,a.Z)(function*(){try{return e.result=yield e.sqliteService.isJsonValid(JSON.stringify(g)),e.result.result?(console.log("$$$ patientStrengthStartupData Json Object is valid $$$"),e.dbName=g.database,yield y(e.db),e.result=yield e.sqliteService.importFromJson(JSON.stringify(g)),console.log(`full import result ${e.result.changes.changes}`),-1===e.result.changes.changes?Promise.reject(new Error("ImportFromJson 'full' patientStrengthStartupData failed")):(yield e.db.open(),e.result=yield e.db.createSyncTable(),e.result.changes.changes<0?Promise.reject(new Error("CreateSyncTable failed")):(e.result=yield e.db.getSyncDate(),0===e.result.length?Promise.reject(new Error("GetSyncDate failed")):(console.log("$$ syncDate "+e.result),e.detailService.setExportJson(!0),Promise.resolve())))):Promise.reject(new Error("IsJsonValid failed"))}catch(t){return Promise.reject(t)}})()}createDatabaseFromBackup(e){var t=this;return(0,a.Z)(function*(){try{return console.log(e),t.result=yield t.sqliteService.isJsonValid(JSON.stringify(e)),t.result.result?(console.log("$$$ Backup Json Object is valid $$$"),t.dbName=e.database,yield y(t.db),t.result=yield t.sqliteService.importFromJson(JSON.stringify(e)),console.log(`full import result ${t.result.changes.changes}`),-1===t.result.changes.changes?Promise.reject(new Error("ImportFromJson 'full' Backup failed")):(yield t.db.open(),t.result=yield t.db.createSyncTable(),t.result.changes.changes<0?Promise.reject(new Error("CreateSyncTable failed")):(t.result=yield t.db.getSyncDate(),0===t.result.length?Promise.reject(new Error("GetSyncDate failed")):(console.log("$$ syncDate "+t.result),t.detailService.setExportJson(!0),Promise.resolve())))):Promise.reject(new Error("IsJsonValid failed"))}catch(n){return Promise.reject(n)}})()}createJSONFromDatabase(){var e=this;return(0,a.Z)(function*(){try{let t;const n=yield e.db.exportToJson("full");return t=yield e.sqliteService.isJsonValid(JSON.stringify(n.export)),t.result?n:Promise.reject(new Error("IsJsonValid 'full' export failed "))}catch(t){return Promise.reject(t)}})()}compareCurrentDatabaseExportedJSONWithSchemaJSON(){var e=this;return(0,a.Z)(function*(){const t=yield e.db.exportToJson("full"),n=[];t.export.tables.forEach(u=>{n.push(u.schema.length)});const s=yield g;if(!s)return Promise.reject(new Error("IsJsonValid failed"));const o=[];return s.tables.forEach(u=>{o.push(u.schema.length)}),yield e.checkEquals(n,o)})()}checkEquals(e,t){return(0,a.Z)(function*(){return JSON.stringify(e)===JSON.stringify(t)})()}getDatabaseVersionFromDBandSetToLocalStorage(){var e=this;return(0,a.Z)(function*(){const t=yield e.db.getVersion();return e.currentDatabaseVersion=t.version,console.log("databaseVersion: "+e.currentDatabaseVersion),e.setDatabaseVersionToLocalStorage(e.currentDatabaseVersion),e.currentDatabaseVersion})()}getDatabaseVersionFromLocalStorage(){var e=this;return(0,a.Z)(function*(){const t=yield localStorage.getItem("databaseVersion");return e.currentDatabaseVersion=Number(t),console.log("databaseVersion: "+e.currentDatabaseVersion),e.currentDatabaseVersion})()}setDatabaseVersionToLocalStorage(e){return(0,a.Z)(function*(){yield localStorage.setItem("databaseVersion",e.toString())})()}upgradeDatabaseSchema(){var e=this;return(0,a.Z)(function*(){console.log(">>>> upgradeDatabaseSchema start");const t=yield e.getDatabaseVersionFromDBandSetToLocalStorage();console.log(">>>> currentDatabaseVersion: "+t);const n=t+1;console.log(">>>> futureDatabaseVersion: "+n);const s=yield e.db.exportToJson("full");if(console.log(">>>> currentDatabase: "+s),yield e.sqliteService.closeConnection(e.dbName),console.log(">>>> closed old Connection"),console.log(">>>> addUpgradeStatement start"),yield e.sqliteService.addUpgradeStatement(e.dbName,t,n,"\nCREATE TABLE tage (\n  id INTEGER PRIMARY KEY NOT NULL,\n  date TEXT,\n  last_modified TEXT DEFAULT (datetime('now', 'localtime'))\n);\nCREATE TABLE symptome (\n  id INTEGER PRIMARY KEY NOT NULL,\n  tageid INTEGER,\n  symptom_names_checkboxes TEXT,\n  symptom_names TEXT,\n  husten_value INTEGER,\n  fieber_value INTEGER,\n  fatigue_value INTEGER,\n  kurzatmigkeit_value INTEGER,\n  brustschmerzen_value INTEGER,\n  kopfschmerzen_value INTEGER,\n  geschmacksverlust_value INTEGER,\n  neurologische_stoerung_value INTEGER,\n  muskelschmerzen_value INTEGER,\n  hautausschlag_value INTEGER,\n  missempfindungen_value INTEGER,\n  schwindel_value INTEGER,\n  gedaechtniseinschraenkungen_value INTEGER,\n  leseeinschraenkungen_value INTEGER,\n  last_modified TEXT DEFAULT (datetime('now', 'localtime')),\n  FOREIGN KEY (tageid) REFERENCES tage(id) ON DELETE SET DEFAULT\n);\nCREATE TABLE essen (\n  id INTEGER PRIMARY KEY NOT NULL,\n  tageid INTEGER,\n  vormittag TEXT,\n  mittag TEXT,\n  abend TEXT,\n  medikamente_value TEXT,\n  last_modified TEXT DEFAULT (datetime('now', 'localtime')),\n  FOREIGN KEY (tageid) REFERENCES tage(id) ON DELETE SET DEFAULT\n);\nCREATE TABLE tagesform (\n  id INTEGER PRIMARY KEY NOT NULL,\n  tageid INTEGER,\n  tagesform_value INTEGER,\n  erschoepfungsart_value INTEGER,\n  schlaf_value INTEGER,\n  stimmung_value INTEGER,\n  last_modified TEXT DEFAULT (datetime('now', 'localtime')),\n  FOREIGN KEY (tageid) REFERENCES tage(id) ON DELETE SET DEFAULT\n);\nCREATE TABLE aktivitaeten (\n  id INTEGER PRIMARY KEY NOT NULL,\n  tageid INTEGER,\n  aktivitaeten_names_checkboxes TEXT,\n  aktivitaeten_names TEXT,\n  sport_value INTEGER,\n  arbeit_value INTEGER,\n  hausarbeit_value INTEGER,\n  entspannung_value INTEGER,\n  last_modified TEXT DEFAULT (datetime('now', 'localtime')),\n  FOREIGN KEY (tageid) REFERENCES tage(id) ON DELETE SET DEFAULT\n);\nCREATE INDEX tage_index_last_modified ON symptome (last_modified);\nCREATE INDEX symptome_index_last_modified ON symptome (last_modified);\nCREATE INDEX essen_index_last_modified ON essen (last_modified);\nCREATE INDEX tagesform_index_last_modified ON tagesform (last_modified);\nCREATE INDEX aktivitaeten_index_last_modified ON aktivitaeten (last_modified);\nCREATE TRIGGER tage_index_last_modified\nAFTER UPDATE ON tage\nFOR EACH ROW WHEN NEW.last_modified <= OLD.last_modified\nBEGIN\n    UPDATE tage SET last_modified= (datetime('now', 'localtime')) WHERE id=OLD.id;\nEND;\nCREATE TRIGGER symptome_index_last_modified\nAFTER UPDATE ON symptome\nFOR EACH ROW WHEN NEW.last_modified <= OLD.last_modified\nBEGIN\n    UPDATE symptome SET last_modified= (datetime('now', 'localtime')) WHERE id=OLD.id;\nEND;\nCREATE TRIGGER essen_trigger_last_modified\nAFTER UPDATE ON essen\nFOR EACH ROW WHEN NEW.last_modified <= OLD.last_modified\nBEGIN\n    UPDATE essen SET last_modified= (datetime('now', 'localtime')) WHERE id=OLD.id;\nEND;\nCREATE TRIGGER tagesform_trigger_last_modified\nAFTER UPDATE ON tagesform\nFOR EACH ROW WHEN NEW.last_modified <= OLD.last_modified\nBEGIN\n    UPDATE tagesform SET last_modified= (datetime('now', 'localtime')) WHERE id=OLD.id;\nEND;\nCREATE TRIGGER aktivitaeten_trigger_last_modified\nAFTER UPDATE ON aktivitaeten\nFOR EACH ROW WHEN NEW.last_modified <= OLD.last_modified\nBEGIN\n    UPDATE aktivitaeten SET last_modified= (datetime('now', 'localtime')) WHERE id=OLD.id;\nEND;\n",s.export.values),console.log(">>>> addUpgradeStatement done"),console.log(">>>> creating Connection again"),e.db=yield e.sqliteService.createConnection(e.dbName,!1,"no-encryption",n),console.log(">>>> created Connection: "+e.db),null===e.db)return console.log(">>>> this.db = null -> rejecting Promise:  "+e.db),Promise.reject(new Error("CreateConnection"+e.dbName+"failed"));console.log(">>>> open Database again"),yield e.db.open(),console.log(">>>> Hurray! Database again opened")})()}openDatabase(){var e=this;return(0,a.Z)(function*(){yield e.db.open()})()}createDatabaseExport(e){var t=this;return(0,a.Z)(function*(){const n=yield t.db.exportToJson(e);return console.log("$$$ jsonObj "+JSON.stringify(n)),t.result=yield t.sqliteService.isJsonValid(JSON.stringify(n.export)),t.result.result?(t.export=JSON.stringify(n.export),t.export):Promise.reject(new Error("Fehler! Datenbankexport gescheitert!"))})()}getTablesCombined(){var e=this;return(0,a.Z)(function*(){const t=performance.now(),n="SELECT * FROM tage INNER JOIN symptome ON symptome.tageid = tage.id INNER JOIN essen ON essen.tageid = tage.id INNER JOIN tagesform ON tagesform.tageid = tage.id INNER JOIN aktivitaeten ON aktivitaeten.tageid = tage.id ORDER BY date DESC;",s=yield e.db.query(n),o=performance.now();if(void 0===s)throw new Error("Query"+n+"failed");return console.log(`Call to doSomething took ${o-t} milliseconds.`),s})()}getTageList(){var e=this;return(0,a.Z)(function*(){const t=performance.now(),n="SELECT * FROM tage ORDER BY date DESC;",s=yield e.db.query(n);if(void 0===s)throw new Error("Query"+n+"failed");{const o=performance.now();return console.log(`Call to tage took ${o-t} milliseconds.`),s}})()}getTagesInRnage(e,t){var n=this;return(0,a.Z)(function*(){const s=performance.now(),o="SELECT * FROM tage ORDER BY date DESC LIMIT "+t+" OFFSET "+e+";",i=yield n.db.query(o);if(void 0===i)throw new Error("Query"+o+"failed");{const u=performance.now();return console.log(`Call to tage took ${u-s} milliseconds.`),i}})()}getSymptomeList(){var e=this;return(0,a.Z)(function*(){return e.symptomRepository.findAll()})()}getSymptomeListbyTagId(e){var t=this;return(0,a.Z)(function*(){return t.symptomRepository.findOne(e)})()}getAktivitaetenListbyTagId(e){var t=this;return(0,a.Z)(function*(){return t.aktivitaetRepository.findOne(e)})()}getEssenList(){var e=this;return(0,a.Z)(function*(){return e.essenRepository.findAll()})()}getEssenListbyTagId(e){var t=this;return(0,a.Z)(function*(){return t.essenRepository.findOne(e)})()}getTagesformList(){var e=this;return(0,a.Z)(function*(){return e.tagesformRepository.findAll()})()}getTagesformListAndIdDate(){var e=this;return(0,a.Z)(function*(){const t="SELECT * FROM tage INNER JOIN tagesform ON tagesform.tageid = tage.id ORDER BY date DESC;",n=yield e.db.query(t);if(void 0===n)throw new Error("Query failed:"+t);return n})()}getAktivitaetList(){var e=this;return(0,a.Z)(function*(){return e.aktivitaetRepository.findAll()})()}getTagesformListbyTagId(e){var t=this;return(0,a.Z)(function*(){return t.tagesformRepository.findOne(e)})()}updateSymptomeNames(e,t,n,s,o,i,u,E,T,c,p,F,P,q,U,Z,B){var j=this;return(0,a.Z)(function*(){const J=(new Date).toISOString().split(".")[0],D=`UPDATE symptome SET symptom_names = '${t}',\n                symptom_names_checkboxes = '${n}',\n                husten_value = '${s}',\n                fieber_value = '${o}',\n                fatigue_value = '${i}',\n                kurzatmigkeit_value = '${u}',\n                brustschmerzen_value = '${E}',\n                kopfschmerzen_value = '${T}',\n                geschmacksverlust_value = '${c}',\n                neurologische_stoerung_value = '${p}',\n                muskelschmerzen_value = '${F}',\n                hautausschlag_value = '${P}',\n                missempfindungen_value = '${q}',\n                schwindel_value = '${U}',\n                gedaechtniseinschraenkungen_value = '${Z}',\n                leseeinschraenkungen_value = '${B}',\n                last_modified = '${J}' WHERE tageid = ${e};`,I=yield j.db.execute(D);if(void 0===I)throw new Error("Execution failed:"+D);return I})()}updateAktivitaetenNames(e,t,n,s,o,i,u){var E=this;return(0,a.Z)(function*(){const T=(new Date).toISOString().split(".")[0],c=`UPDATE aktivitaeten SET aktivitaeten_names = '${t}',\n                aktivitaeten_names_checkboxes = '${n}',\n                sport_value = '${s}',\n                arbeit_value = '${o}',\n                hausarbeit_value = '${i}',\n                entspannung_value = '${u}',\n                last_modified = '${T}' WHERE tageid = ${e};`,p=yield E.db.execute(c);if(void 0===p)throw new Error("Execution failed:"+c);return p})()}updateEssenNames(e,t,n,s,o){var i=this;return(0,a.Z)(function*(){const u={id:null,tageid:e,vormittag:t,mittag:n,abend:s,medikamenteValue:o,lastModified:(new Date).toISOString().split(".")[0]};return i.essenRepository.update(e,u)})()}updateTagesformNames(e,t,n,s,o){var i=this;return(0,a.Z)(function*(){const u=(new Date).toISOString().split(".")[0],E=`UPDATE tagesform SET tagesform_value = '${t}',\n                                erschoepfungsart_value = '${n}',\n                                schlaf_value = '${s}',\n                                stimmung_value = '${o}',\n                                last_modified = '${u}' WHERE tageid = ${e};`,T=yield i.db.execute(E);if(void 0===T)throw new Error("Execution failed:"+E);return T})()}checkSameDateAnyDay(e){var t=this;return(0,a.Z)(function*(){console.log(e);const s=`SELECT date FROM tage WHERE date LIKE '%${e.slice(0,10)}%' ORDER BY date DESC;`,o=yield t.db.query(s);return console.log(o),o.values.length>0||0!==o.values.length&&void 0})()}postNeuerTagAnyDay(e){var t=this;return(0,a.Z)(function*(){var n,s,o,i;console.log(e);const u=yield t.checkSameDateAnyDay(e);if(console.log(u),!1===u){const E=`INSERT OR IGNORE INTO tage (date) VALUES ('${e}');`;yield t.db.execute(E);const T=`SELECT * FROM tage WHERE date = '${e}';`,c=yield t.db.query(T);if(t.postNeuesEssen(null===(n=c.values[0])||void 0===n?void 0:n.id),t.postNeueSymptome(null===(s=c.values[0])||void 0===s?void 0:s.id),t.postNeueTagesform(null===(o=c.values[0])||void 0===o?void 0:o.id),t.postNeueAktivitaeten(null===(i=c.values[0])||void 0===i?void 0:i.id),void 0===c)throw new Error("Execution failed:"+c);return c}throw new Error("Fehler! Eintrag f\xfcr diesen Tag bereits vorhanden.")})()}postNeuerTag(e){var t=this;return(0,a.Z)(function*(){var n,s,o,i;const u=yield t.checkSameDateAnyDay(e);if(!1===u){const E=`INSERT OR IGNORE INTO tage (date) VALUES ('${e}');`;yield t.db.execute(E);const T=`SELECT id FROM tage WHERE date = '${e}';`,c=yield t.db.query(T);if(yield t.postNeuesEssen(null===(n=c.values[0])||void 0===n?void 0:n.id),yield t.postNeueSymptome(null===(s=c.values[0])||void 0===s?void 0:s.id),yield t.postNeueTagesform(null===(o=c.values[0])||void 0===o?void 0:o.id),yield t.postNeueAktivitaeten(null===(i=c.values[0])||void 0===i?void 0:i.id),void 0===c)throw new Error("Execution failed:"+c);return c}if(!0!==u)throw new Error("Create new Day error");console.log("Entry already existing for this day!")})()}postNeuesEssen(e){var t=this;return(0,a.Z)(function*(){return t.essenRepository.createOneEmpty(e)})()}postNeueSymptome(e){var t=this;return(0,a.Z)(function*(){return t.symptomRepository.createOneEmpty(e)})()}postNeueTagesform(e){var t=this;return(0,a.Z)(function*(){return t.tagesformRepository.createOneEmpty(e)})()}postNeueAktivitaeten(e){var t=this;return(0,a.Z)(function*(){return t.aktivitaetRepository.createOneEmpty(e)})()}deleteTagAnyDay(e){var t=this;return(0,a.Z)(function*(){var n;console.log(e);const s=`SELECT id FROM tage WHERE date LIKE '%${e}%';`,o=yield t.db.query(s);console.log(o);const i=parseInt(null===(n=o.values[0])||void 0===n?void 0:n.id);yield t.deleteNeuesEssenById(i),yield t.deleteNeueSymptomeById(i),yield t.deleteAktivitaetenById(i),yield t.deleteTagesformById(i);const u=`DELETE FROM tage WHERE date LIKE '%${e}%';`,E=yield t.db.query(u);if(console.log(E),void 0===E)throw new Error("Execution failed:"+E);return E})()}deleteNeuesEssenById(e){var t=this;return(0,a.Z)(function*(){t.essenRepository.delete(e)})()}deleteNeueSymptomeById(e){var t=this;return(0,a.Z)(function*(){t.symptomRepository.delete(e)})()}deleteTagesformById(e){var t=this;return(0,a.Z)(function*(){t.tagesformRepository.delete(e)})()}deleteAktivitaetenById(e){var t=this;return(0,a.Z)(function*(){t.aktivitaetRepository.delete(e)})()}deleteDatabaseByName(){var e=this;return(0,a.Z)(function*(){yield y(e.db)})()}}return l.\u0275fac=function(e){return new(e||l)(_.\u0275\u0275inject($.Y),_.\u0275\u0275inject(G.X))},l.\u0275prov=_.\u0275\u0275defineInjectable({token:l,factory:l.\u0275fac,providedIn:"root"}),l})()},1618:(b,h,m)=>{m.d(h,{L:()=>y});var a=m(2096),v=m(2159);let y=(()=>{class d{constructor(f){this.toast=f,this.myToast=null}showSuccessToast(f){this.hideToast(),this.myToast=this.toast.create({message:f,cssClass:"toast-success",position:"bottom",duration:2e3,animated:!0,color:"success",translucent:!0}).then(g=>{console.log(g),g.present()})}showErrorToast(f){this.hideToast(),this.myToast=this.toast.create({cssClass:"toast-error",message:f,position:"bottom",duration:2e3,animated:!0,color:"danger",translucent:!0}).then(g=>{console.log(g),g.present()})}hideToast(){null!==this.myToast&&this.myToast.length>0&&(this.myToast=this.toast.dismiss(null,void 0,null))}}return d.\u0275fac=function(f){return new(f||d)(a.\u0275\u0275inject(v.ToastController))},d.\u0275prov=a.\u0275\u0275defineInjectable({token:d,factory:d.\u0275fac,providedIn:"root"}),d})()},1511:(b,h,m)=>{m.d(h,{m:()=>y});var a=m(9808),v=m(2096);let y=(()=>{class d{}return d.\u0275fac=function(f){return new(f||d)},d.\u0275mod=v.\u0275\u0275defineNgModule({type:d}),d.\u0275inj=v.\u0275\u0275defineInjector({imports:[[a.CommonModule]]}),d})()}}]);